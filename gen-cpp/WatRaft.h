/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WatRaft_H
#define WatRaft_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "WatRaft_types.h"

namespace WatRaft {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class WatRaftIf {
 public:
  virtual ~WatRaftIf() {}
  virtual void get(std::string& _return, const std::string& key) = 0;
  virtual void put(const std::string& key, const std::string& val) = 0;
  virtual void append_entries(AEResult& _return, const int32_t term, const int32_t leader_id, const int32_t prev_log_index, const int32_t prev_log_term, const std::vector<Entry> & entries, const int32_t leader_commit_index) = 0;
  virtual void request_vote(RVResult& _return, const int32_t term, const int32_t candidate_id, const int32_t last_log_index, const int32_t last_log_term) = 0;
  virtual void debug_echo(std::string& _return, const std::string& msg) = 0;
};

class WatRaftIfFactory {
 public:
  typedef WatRaftIf Handler;

  virtual ~WatRaftIfFactory() {}

  virtual WatRaftIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WatRaftIf* /* handler */) = 0;
};

class WatRaftIfSingletonFactory : virtual public WatRaftIfFactory {
 public:
  WatRaftIfSingletonFactory(const boost::shared_ptr<WatRaftIf>& iface) : iface_(iface) {}
  virtual ~WatRaftIfSingletonFactory() {}

  virtual WatRaftIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WatRaftIf* /* handler */) {}

 protected:
  boost::shared_ptr<WatRaftIf> iface_;
};

class WatRaftNull : virtual public WatRaftIf {
 public:
  virtual ~WatRaftNull() {}
  void get(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
  void put(const std::string& /* key */, const std::string& /* val */) {
    return;
  }
  void append_entries(AEResult& /* _return */, const int32_t /* term */, const int32_t /* leader_id */, const int32_t /* prev_log_index */, const int32_t /* prev_log_term */, const std::vector<Entry> & /* entries */, const int32_t /* leader_commit_index */) {
    return;
  }
  void request_vote(RVResult& /* _return */, const int32_t /* term */, const int32_t /* candidate_id */, const int32_t /* last_log_index */, const int32_t /* last_log_term */) {
    return;
  }
  void debug_echo(std::string& /* _return */, const std::string& /* msg */) {
    return;
  }
};

typedef struct _WatRaft_get_args__isset {
  _WatRaft_get_args__isset() : key(false) {}
  bool key :1;
} _WatRaft_get_args__isset;

class WatRaft_get_args {
 public:

  WatRaft_get_args(const WatRaft_get_args&);
  WatRaft_get_args& operator=(const WatRaft_get_args&);
  WatRaft_get_args() : key() {
  }

  virtual ~WatRaft_get_args() throw();
  std::string key;

  _WatRaft_get_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const WatRaft_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const WatRaft_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatRaft_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatRaft_get_pargs {
 public:


  virtual ~WatRaft_get_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatRaft_get_result__isset {
  _WatRaft_get_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _WatRaft_get_result__isset;

class WatRaft_get_result {
 public:

  WatRaft_get_result(const WatRaft_get_result&);
  WatRaft_get_result& operator=(const WatRaft_get_result&);
  WatRaft_get_result() : success() {
  }

  virtual ~WatRaft_get_result() throw();
  std::string success;
  WatRaftException err;

  _WatRaft_get_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_err(const WatRaftException& val);

  bool operator == (const WatRaft_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const WatRaft_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatRaft_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatRaft_get_presult__isset {
  _WatRaft_get_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _WatRaft_get_presult__isset;

class WatRaft_get_presult {
 public:


  virtual ~WatRaft_get_presult() throw();
  std::string* success;
  WatRaftException err;

  _WatRaft_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WatRaft_put_args__isset {
  _WatRaft_put_args__isset() : key(false), val(false) {}
  bool key :1;
  bool val :1;
} _WatRaft_put_args__isset;

class WatRaft_put_args {
 public:

  WatRaft_put_args(const WatRaft_put_args&);
  WatRaft_put_args& operator=(const WatRaft_put_args&);
  WatRaft_put_args() : key(), val() {
  }

  virtual ~WatRaft_put_args() throw();
  std::string key;
  std::string val;

  _WatRaft_put_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_val(const std::string& val);

  bool operator == (const WatRaft_put_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(val == rhs.val))
      return false;
    return true;
  }
  bool operator != (const WatRaft_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatRaft_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatRaft_put_pargs {
 public:


  virtual ~WatRaft_put_pargs() throw();
  const std::string* key;
  const std::string* val;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatRaft_put_result__isset {
  _WatRaft_put_result__isset() : err(false) {}
  bool err :1;
} _WatRaft_put_result__isset;

class WatRaft_put_result {
 public:

  WatRaft_put_result(const WatRaft_put_result&);
  WatRaft_put_result& operator=(const WatRaft_put_result&);
  WatRaft_put_result() {
  }

  virtual ~WatRaft_put_result() throw();
  WatRaftException err;

  _WatRaft_put_result__isset __isset;

  void __set_err(const WatRaftException& val);

  bool operator == (const WatRaft_put_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const WatRaft_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatRaft_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatRaft_put_presult__isset {
  _WatRaft_put_presult__isset() : err(false) {}
  bool err :1;
} _WatRaft_put_presult__isset;

class WatRaft_put_presult {
 public:


  virtual ~WatRaft_put_presult() throw();
  WatRaftException err;

  _WatRaft_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WatRaft_append_entries_args__isset {
  _WatRaft_append_entries_args__isset() : term(false), leader_id(false), prev_log_index(false), prev_log_term(false), entries(false), leader_commit_index(false) {}
  bool term :1;
  bool leader_id :1;
  bool prev_log_index :1;
  bool prev_log_term :1;
  bool entries :1;
  bool leader_commit_index :1;
} _WatRaft_append_entries_args__isset;

class WatRaft_append_entries_args {
 public:

  WatRaft_append_entries_args(const WatRaft_append_entries_args&);
  WatRaft_append_entries_args& operator=(const WatRaft_append_entries_args&);
  WatRaft_append_entries_args() : term(0), leader_id(0), prev_log_index(0), prev_log_term(0), leader_commit_index(0) {
  }

  virtual ~WatRaft_append_entries_args() throw();
  int32_t term;
  int32_t leader_id;
  int32_t prev_log_index;
  int32_t prev_log_term;
  std::vector<Entry>  entries;
  int32_t leader_commit_index;

  _WatRaft_append_entries_args__isset __isset;

  void __set_term(const int32_t val);

  void __set_leader_id(const int32_t val);

  void __set_prev_log_index(const int32_t val);

  void __set_prev_log_term(const int32_t val);

  void __set_entries(const std::vector<Entry> & val);

  void __set_leader_commit_index(const int32_t val);

  bool operator == (const WatRaft_append_entries_args & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(leader_id == rhs.leader_id))
      return false;
    if (!(prev_log_index == rhs.prev_log_index))
      return false;
    if (!(prev_log_term == rhs.prev_log_term))
      return false;
    if (!(entries == rhs.entries))
      return false;
    if (!(leader_commit_index == rhs.leader_commit_index))
      return false;
    return true;
  }
  bool operator != (const WatRaft_append_entries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatRaft_append_entries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatRaft_append_entries_pargs {
 public:


  virtual ~WatRaft_append_entries_pargs() throw();
  const int32_t* term;
  const int32_t* leader_id;
  const int32_t* prev_log_index;
  const int32_t* prev_log_term;
  const std::vector<Entry> * entries;
  const int32_t* leader_commit_index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatRaft_append_entries_result__isset {
  _WatRaft_append_entries_result__isset() : success(false) {}
  bool success :1;
} _WatRaft_append_entries_result__isset;

class WatRaft_append_entries_result {
 public:

  WatRaft_append_entries_result(const WatRaft_append_entries_result&);
  WatRaft_append_entries_result& operator=(const WatRaft_append_entries_result&);
  WatRaft_append_entries_result() {
  }

  virtual ~WatRaft_append_entries_result() throw();
  AEResult success;

  _WatRaft_append_entries_result__isset __isset;

  void __set_success(const AEResult& val);

  bool operator == (const WatRaft_append_entries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WatRaft_append_entries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatRaft_append_entries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatRaft_append_entries_presult__isset {
  _WatRaft_append_entries_presult__isset() : success(false) {}
  bool success :1;
} _WatRaft_append_entries_presult__isset;

class WatRaft_append_entries_presult {
 public:


  virtual ~WatRaft_append_entries_presult() throw();
  AEResult* success;

  _WatRaft_append_entries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WatRaft_request_vote_args__isset {
  _WatRaft_request_vote_args__isset() : term(false), candidate_id(false), last_log_index(false), last_log_term(false) {}
  bool term :1;
  bool candidate_id :1;
  bool last_log_index :1;
  bool last_log_term :1;
} _WatRaft_request_vote_args__isset;

class WatRaft_request_vote_args {
 public:

  WatRaft_request_vote_args(const WatRaft_request_vote_args&);
  WatRaft_request_vote_args& operator=(const WatRaft_request_vote_args&);
  WatRaft_request_vote_args() : term(0), candidate_id(0), last_log_index(0), last_log_term(0) {
  }

  virtual ~WatRaft_request_vote_args() throw();
  int32_t term;
  int32_t candidate_id;
  int32_t last_log_index;
  int32_t last_log_term;

  _WatRaft_request_vote_args__isset __isset;

  void __set_term(const int32_t val);

  void __set_candidate_id(const int32_t val);

  void __set_last_log_index(const int32_t val);

  void __set_last_log_term(const int32_t val);

  bool operator == (const WatRaft_request_vote_args & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(candidate_id == rhs.candidate_id))
      return false;
    if (!(last_log_index == rhs.last_log_index))
      return false;
    if (!(last_log_term == rhs.last_log_term))
      return false;
    return true;
  }
  bool operator != (const WatRaft_request_vote_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatRaft_request_vote_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatRaft_request_vote_pargs {
 public:


  virtual ~WatRaft_request_vote_pargs() throw();
  const int32_t* term;
  const int32_t* candidate_id;
  const int32_t* last_log_index;
  const int32_t* last_log_term;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatRaft_request_vote_result__isset {
  _WatRaft_request_vote_result__isset() : success(false) {}
  bool success :1;
} _WatRaft_request_vote_result__isset;

class WatRaft_request_vote_result {
 public:

  WatRaft_request_vote_result(const WatRaft_request_vote_result&);
  WatRaft_request_vote_result& operator=(const WatRaft_request_vote_result&);
  WatRaft_request_vote_result() {
  }

  virtual ~WatRaft_request_vote_result() throw();
  RVResult success;

  _WatRaft_request_vote_result__isset __isset;

  void __set_success(const RVResult& val);

  bool operator == (const WatRaft_request_vote_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WatRaft_request_vote_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatRaft_request_vote_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatRaft_request_vote_presult__isset {
  _WatRaft_request_vote_presult__isset() : success(false) {}
  bool success :1;
} _WatRaft_request_vote_presult__isset;

class WatRaft_request_vote_presult {
 public:


  virtual ~WatRaft_request_vote_presult() throw();
  RVResult* success;

  _WatRaft_request_vote_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WatRaft_debug_echo_args__isset {
  _WatRaft_debug_echo_args__isset() : msg(false) {}
  bool msg :1;
} _WatRaft_debug_echo_args__isset;

class WatRaft_debug_echo_args {
 public:

  WatRaft_debug_echo_args(const WatRaft_debug_echo_args&);
  WatRaft_debug_echo_args& operator=(const WatRaft_debug_echo_args&);
  WatRaft_debug_echo_args() : msg() {
  }

  virtual ~WatRaft_debug_echo_args() throw();
  std::string msg;

  _WatRaft_debug_echo_args__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const WatRaft_debug_echo_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const WatRaft_debug_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatRaft_debug_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatRaft_debug_echo_pargs {
 public:


  virtual ~WatRaft_debug_echo_pargs() throw();
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatRaft_debug_echo_result__isset {
  _WatRaft_debug_echo_result__isset() : success(false) {}
  bool success :1;
} _WatRaft_debug_echo_result__isset;

class WatRaft_debug_echo_result {
 public:

  WatRaft_debug_echo_result(const WatRaft_debug_echo_result&);
  WatRaft_debug_echo_result& operator=(const WatRaft_debug_echo_result&);
  WatRaft_debug_echo_result() : success() {
  }

  virtual ~WatRaft_debug_echo_result() throw();
  std::string success;

  _WatRaft_debug_echo_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const WatRaft_debug_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WatRaft_debug_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatRaft_debug_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatRaft_debug_echo_presult__isset {
  _WatRaft_debug_echo_presult__isset() : success(false) {}
  bool success :1;
} _WatRaft_debug_echo_presult__isset;

class WatRaft_debug_echo_presult {
 public:


  virtual ~WatRaft_debug_echo_presult() throw();
  std::string* success;

  _WatRaft_debug_echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class WatRaftClient : virtual public WatRaftIf {
 public:
  WatRaftClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  WatRaftClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(std::string& _return, const std::string& key);
  void send_get(const std::string& key);
  void recv_get(std::string& _return);
  void put(const std::string& key, const std::string& val);
  void send_put(const std::string& key, const std::string& val);
  void recv_put();
  void append_entries(AEResult& _return, const int32_t term, const int32_t leader_id, const int32_t prev_log_index, const int32_t prev_log_term, const std::vector<Entry> & entries, const int32_t leader_commit_index);
  void send_append_entries(const int32_t term, const int32_t leader_id, const int32_t prev_log_index, const int32_t prev_log_term, const std::vector<Entry> & entries, const int32_t leader_commit_index);
  void recv_append_entries(AEResult& _return);
  void request_vote(RVResult& _return, const int32_t term, const int32_t candidate_id, const int32_t last_log_index, const int32_t last_log_term);
  void send_request_vote(const int32_t term, const int32_t candidate_id, const int32_t last_log_index, const int32_t last_log_term);
  void recv_request_vote(RVResult& _return);
  void debug_echo(std::string& _return, const std::string& msg);
  void send_debug_echo(const std::string& msg);
  void recv_debug_echo(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WatRaftProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<WatRaftIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (WatRaftProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_append_entries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_request_vote(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_debug_echo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WatRaftProcessor(boost::shared_ptr<WatRaftIf> iface) :
    iface_(iface) {
    processMap_["get"] = &WatRaftProcessor::process_get;
    processMap_["put"] = &WatRaftProcessor::process_put;
    processMap_["append_entries"] = &WatRaftProcessor::process_append_entries;
    processMap_["request_vote"] = &WatRaftProcessor::process_request_vote;
    processMap_["debug_echo"] = &WatRaftProcessor::process_debug_echo;
  }

  virtual ~WatRaftProcessor() {}
};

class WatRaftProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WatRaftProcessorFactory(const ::boost::shared_ptr< WatRaftIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WatRaftIfFactory > handlerFactory_;
};

class WatRaftMultiface : virtual public WatRaftIf {
 public:
  WatRaftMultiface(std::vector<boost::shared_ptr<WatRaftIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WatRaftMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WatRaftIf> > ifaces_;
  WatRaftMultiface() {}
  void add(boost::shared_ptr<WatRaftIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(std::string& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, key);
    }
    ifaces_[i]->get(_return, key);
    return;
  }

  void put(const std::string& key, const std::string& val) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(key, val);
    }
    ifaces_[i]->put(key, val);
  }

  void append_entries(AEResult& _return, const int32_t term, const int32_t leader_id, const int32_t prev_log_index, const int32_t prev_log_term, const std::vector<Entry> & entries, const int32_t leader_commit_index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->append_entries(_return, term, leader_id, prev_log_index, prev_log_term, entries, leader_commit_index);
    }
    ifaces_[i]->append_entries(_return, term, leader_id, prev_log_index, prev_log_term, entries, leader_commit_index);
    return;
  }

  void request_vote(RVResult& _return, const int32_t term, const int32_t candidate_id, const int32_t last_log_index, const int32_t last_log_term) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->request_vote(_return, term, candidate_id, last_log_index, last_log_term);
    }
    ifaces_[i]->request_vote(_return, term, candidate_id, last_log_index, last_log_term);
    return;
  }

  void debug_echo(std::string& _return, const std::string& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->debug_echo(_return, msg);
    }
    ifaces_[i]->debug_echo(_return, msg);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class WatRaftConcurrentClient : virtual public WatRaftIf {
 public:
  WatRaftConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  WatRaftConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(std::string& _return, const std::string& key);
  int32_t send_get(const std::string& key);
  void recv_get(std::string& _return, const int32_t seqid);
  void put(const std::string& key, const std::string& val);
  int32_t send_put(const std::string& key, const std::string& val);
  void recv_put(const int32_t seqid);
  void append_entries(AEResult& _return, const int32_t term, const int32_t leader_id, const int32_t prev_log_index, const int32_t prev_log_term, const std::vector<Entry> & entries, const int32_t leader_commit_index);
  int32_t send_append_entries(const int32_t term, const int32_t leader_id, const int32_t prev_log_index, const int32_t prev_log_term, const std::vector<Entry> & entries, const int32_t leader_commit_index);
  void recv_append_entries(AEResult& _return, const int32_t seqid);
  void request_vote(RVResult& _return, const int32_t term, const int32_t candidate_id, const int32_t last_log_index, const int32_t last_log_term);
  int32_t send_request_vote(const int32_t term, const int32_t candidate_id, const int32_t last_log_index, const int32_t last_log_term);
  void recv_request_vote(RVResult& _return, const int32_t seqid);
  void debug_echo(std::string& _return, const std::string& msg);
  int32_t send_debug_echo(const std::string& msg);
  void recv_debug_echo(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
