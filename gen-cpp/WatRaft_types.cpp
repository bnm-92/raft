/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "WatRaft_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace WatRaft {

int _kWatRaftErrorTypeValues[] = {
  WatRaftErrorType::KEY_NOT_FOUND,
  WatRaftErrorType::NOT_LEADER,
  WatRaftErrorType::LEADER_NOT_AVAILABLE
};
const char* _kWatRaftErrorTypeNames[] = {
  "KEY_NOT_FOUND",
  "NOT_LEADER",
  "LEADER_NOT_AVAILABLE"
};
const std::map<int, const char*> _WatRaftErrorType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kWatRaftErrorTypeValues, _kWatRaftErrorTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


WatRaftException::~WatRaftException() throw() {
}


void WatRaftException::__set_error_code(const WatRaftErrorType::type val) {
  this->error_code = val;
}

void WatRaftException::__set_error_message(const std::string& val) {
  this->error_message = val;
}

void WatRaftException::__set_node_id(const int32_t val) {
  this->node_id = val;
__isset.node_id = true;
}

uint32_t WatRaftException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->error_code = (WatRaftErrorType::type)ecast0;
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_message);
          this->__isset.error_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->node_id);
          this->__isset.node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WatRaftException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WatRaftException");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.node_id) {
    xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->node_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WatRaftException &a, WatRaftException &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_message, b.error_message);
  swap(a.node_id, b.node_id);
  swap(a.__isset, b.__isset);
}

WatRaftException::WatRaftException(const WatRaftException& other1) : TException() {
  error_code = other1.error_code;
  error_message = other1.error_message;
  node_id = other1.node_id;
  __isset = other1.__isset;
}
WatRaftException& WatRaftException::operator=(const WatRaftException& other2) {
  error_code = other2.error_code;
  error_message = other2.error_message;
  node_id = other2.node_id;
  __isset = other2.__isset;
  return *this;
}
void WatRaftException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WatRaftException(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_message=" << to_string(error_message);
  out << ", " << "node_id="; (__isset.node_id ? (out << to_string(node_id)) : (out << "<null>"));
  out << ")";
}

const char* WatRaftException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: WatRaftException";
  }
}


AEResult::~AEResult() throw() {
}


void AEResult::__set_term(const int32_t val) {
  this->term = val;
}

void AEResult::__set_success(const bool val) {
  this->success = val;
}

uint32_t AEResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->term);
          this->__isset.term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AEResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AEResult");

  xfer += oprot->writeFieldBegin("term", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->success);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AEResult &a, AEResult &b) {
  using ::std::swap;
  swap(a.term, b.term);
  swap(a.success, b.success);
  swap(a.__isset, b.__isset);
}

AEResult::AEResult(const AEResult& other3) {
  term = other3.term;
  success = other3.success;
  __isset = other3.__isset;
}
AEResult& AEResult::operator=(const AEResult& other4) {
  term = other4.term;
  success = other4.success;
  __isset = other4.__isset;
  return *this;
}
void AEResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AEResult(";
  out << "term=" << to_string(term);
  out << ", " << "success=" << to_string(success);
  out << ")";
}


RVResult::~RVResult() throw() {
}


void RVResult::__set_term(const int32_t val) {
  this->term = val;
}

void RVResult::__set_vote_granted(const bool val) {
  this->vote_granted = val;
}

uint32_t RVResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->term);
          this->__isset.term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->vote_granted);
          this->__isset.vote_granted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RVResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RVResult");

  xfer += oprot->writeFieldBegin("term", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vote_granted", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->vote_granted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RVResult &a, RVResult &b) {
  using ::std::swap;
  swap(a.term, b.term);
  swap(a.vote_granted, b.vote_granted);
  swap(a.__isset, b.__isset);
}

RVResult::RVResult(const RVResult& other5) {
  term = other5.term;
  vote_granted = other5.vote_granted;
  __isset = other5.__isset;
}
RVResult& RVResult::operator=(const RVResult& other6) {
  term = other6.term;
  vote_granted = other6.vote_granted;
  __isset = other6.__isset;
  return *this;
}
void RVResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RVResult(";
  out << "term=" << to_string(term);
  out << ", " << "vote_granted=" << to_string(vote_granted);
  out << ")";
}


Entry::~Entry() throw() {
}


void Entry::__set_term(const int32_t val) {
  this->term = val;
}

void Entry::__set_key(const std::string& val) {
  this->key = val;
}

void Entry::__set_val(const std::string& val) {
  this->val = val;
}

uint32_t Entry::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->term);
          this->__isset.term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->val);
          this->__isset.val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Entry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Entry");

  xfer += oprot->writeFieldBegin("term", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->val);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Entry &a, Entry &b) {
  using ::std::swap;
  swap(a.term, b.term);
  swap(a.key, b.key);
  swap(a.val, b.val);
  swap(a.__isset, b.__isset);
}

Entry::Entry(const Entry& other7) {
  term = other7.term;
  key = other7.key;
  val = other7.val;
  __isset = other7.__isset;
}
Entry& Entry::operator=(const Entry& other8) {
  term = other8.term;
  key = other8.key;
  val = other8.val;
  __isset = other8.__isset;
  return *this;
}
void Entry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Entry(";
  out << "term=" << to_string(term);
  out << ", " << "key=" << to_string(key);
  out << ", " << "val=" << to_string(val);
  out << ")";
}

} // namespace
