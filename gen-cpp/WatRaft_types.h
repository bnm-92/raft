/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WatRaft_TYPES_H
#define WatRaft_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace WatRaft {

struct WatRaftErrorType {
  enum type {
    KEY_NOT_FOUND = 0,
    NOT_LEADER = 1,
    LEADER_NOT_AVAILABLE = 2
  };
};

extern const std::map<int, const char*> _WatRaftErrorType_VALUES_TO_NAMES;

class WatRaftException;

class AEResult;

class RVResult;

class Entry;

typedef struct _WatRaftException__isset {
  _WatRaftException__isset() : error_code(false), error_message(false), node_id(false) {}
  bool error_code :1;
  bool error_message :1;
  bool node_id :1;
} _WatRaftException__isset;

class WatRaftException : public ::apache::thrift::TException {
 public:

  WatRaftException(const WatRaftException&);
  WatRaftException& operator=(const WatRaftException&);
  WatRaftException() : error_code((WatRaftErrorType::type)0), error_message(), node_id(0) {
  }

  virtual ~WatRaftException() throw();
  WatRaftErrorType::type error_code;
  std::string error_message;
  int32_t node_id;

  _WatRaftException__isset __isset;

  void __set_error_code(const WatRaftErrorType::type val);

  void __set_error_message(const std::string& val);

  void __set_node_id(const int32_t val);

  bool operator == (const WatRaftException & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_message == rhs.error_message))
      return false;
    if (__isset.node_id != rhs.__isset.node_id)
      return false;
    else if (__isset.node_id && !(node_id == rhs.node_id))
      return false;
    return true;
  }
  bool operator != (const WatRaftException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatRaftException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(WatRaftException &a, WatRaftException &b);

inline std::ostream& operator<<(std::ostream& out, const WatRaftException& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AEResult__isset {
  _AEResult__isset() : term(false), success(false) {}
  bool term :1;
  bool success :1;
} _AEResult__isset;

class AEResult {
 public:

  AEResult(const AEResult&);
  AEResult& operator=(const AEResult&);
  AEResult() : term(0), success(0) {
  }

  virtual ~AEResult() throw();
  int32_t term;
  bool success;

  _AEResult__isset __isset;

  void __set_term(const int32_t val);

  void __set_success(const bool val);

  bool operator == (const AEResult & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AEResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AEResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AEResult &a, AEResult &b);

inline std::ostream& operator<<(std::ostream& out, const AEResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RVResult__isset {
  _RVResult__isset() : term(false), vote_granted(false) {}
  bool term :1;
  bool vote_granted :1;
} _RVResult__isset;

class RVResult {
 public:

  RVResult(const RVResult&);
  RVResult& operator=(const RVResult&);
  RVResult() : term(0), vote_granted(0) {
  }

  virtual ~RVResult() throw();
  int32_t term;
  bool vote_granted;

  _RVResult__isset __isset;

  void __set_term(const int32_t val);

  void __set_vote_granted(const bool val);

  bool operator == (const RVResult & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(vote_granted == rhs.vote_granted))
      return false;
    return true;
  }
  bool operator != (const RVResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RVResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RVResult &a, RVResult &b);

inline std::ostream& operator<<(std::ostream& out, const RVResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Entry__isset {
  _Entry__isset() : term(false), key(false), val(false) {}
  bool term :1;
  bool key :1;
  bool val :1;
} _Entry__isset;

class Entry {
 public:

  Entry(const Entry&);
  Entry& operator=(const Entry&);
  Entry() : term(0), key(), val() {
  }

  virtual ~Entry() throw();
  int32_t term;
  std::string key;
  std::string val;

  _Entry__isset __isset;

  void __set_term(const int32_t val);

  void __set_key(const std::string& val);

  void __set_val(const std::string& val);

  bool operator == (const Entry & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(val == rhs.val))
      return false;
    return true;
  }
  bool operator != (const Entry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Entry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Entry &a, Entry &b);

inline std::ostream& operator<<(std::ostream& out, const Entry& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
